{"message":"failed to resolve: use of undeclared crate or module `near_sdk`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":4,"byte_end":12,"line_start":1,"line_end":1,"column_start":5,"column_end":13,"is_primary":true,"text":[{"text":"use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};","highlight_start":5,"highlight_end":13}],"label":"use of undeclared crate or module `near_sdk`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared crate or module `near_sdk`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:1:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared crate or module `near_sdk`\u001b[0m\n\n"}
{"message":"unresolved import `near_sdk`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018, paths in `use` statements are relative to the current module\nunless they begin with the name of a crate or a literal `crate::`, in which\ncase they start from the crate root. As in Rust 2015 code, the `self::` and\n`super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nIn Rust 2018 the `extern crate` declaration is not required and you can instead\njust `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":4,"byte_end":12,"line_start":1,"line_end":1,"column_start":5,"column_end":13,"is_primary":true,"text":[{"text":"use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};","highlight_start":5,"highlight_end":13}],"label":"use of undeclared crate or module `near_sdk`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `near_sdk`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:1:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared crate or module `near_sdk`\u001b[0m\n\n"}
{"message":"unresolved import `near_sdk`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018, paths in `use` statements are relative to the current module\nunless they begin with the name of a crate or a literal `crate::`, in which\ncase they start from the crate root. As in Rust 2015 code, the `self::` and\n`super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nIn Rust 2018 the `extern crate` declaration is not required and you can instead\njust `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":67,"byte_end":75,"line_start":2,"line_end":2,"column_start":5,"column_end":13,"is_primary":true,"text":[{"text":"use near_sdk::{env, near_bindgen};","highlight_start":5,"highlight_end":13}],"label":"use of undeclared crate or module `near_sdk`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `near_sdk`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:2:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse near_sdk::{env, near_bindgen};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared crate or module `near_sdk`\u001b[0m\n\n"}
{"message":"failed to resolve: use of undeclared crate or module `near_sdk`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":99,"byte_end":107,"line_start":4,"line_end":4,"column_start":1,"column_end":9,"is_primary":true,"text":[{"text":"near_sdk::setup_alloc!();","highlight_start":1,"highlight_end":9}],"label":"use of undeclared crate or module `near_sdk`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared crate or module `near_sdk`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:4:1\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mnear_sdk::setup_alloc!();\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared crate or module `near_sdk`\u001b[0m\n\n"}
{"message":"cannot determine resolution for the attribute macro `near_bindgen`","code":null,"level":"error","spans":[{"file_name":"src/main.rs","byte_start":234,"byte_end":246,"line_start":13,"line_end":13,"column_start":3,"column_end":15,"is_primary":true,"text":[{"text":"#[near_bindgen]","highlight_start":3,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"import resolution is stuck, try simplifying macro imports","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot determine resolution for the attribute macro `near_bindgen`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:13:3\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#[near_bindgen]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: import resolution is stuck, try simplifying macro imports\u001b[0m\n\n"}
{"message":"cannot find derive macro `BorshDeserialize` in this scope","code":null,"level":"error","spans":[{"file_name":"src/main.rs","byte_start":161,"byte_end":177,"line_start":8,"line_end":8,"column_start":19,"column_end":35,"is_primary":true,"text":[{"text":"#[derive(Default, BorshDeserialize, BorshSerialize)]","highlight_start":19,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot find derive macro `BorshDeserialize` in this scope\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:8:19\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#[derive(Default, BorshDeserialize, BorshSerialize)]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"cannot find derive macro `BorshSerialize` in this scope","code":null,"level":"error","spans":[{"file_name":"src/main.rs","byte_start":179,"byte_end":193,"line_start":8,"line_end":8,"column_start":37,"column_end":51,"is_primary":true,"text":[{"text":"#[derive(Default, BorshDeserialize, BorshSerialize)]","highlight_start":37,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot find derive macro `BorshSerialize` in this scope\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:8:37\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#[derive(Default, BorshDeserialize, BorshSerialize)]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"cannot determine resolution for the attribute macro `near_bindgen`","code":null,"level":"error","spans":[{"file_name":"src/main.rs","byte_start":129,"byte_end":141,"line_start":7,"line_end":7,"column_start":3,"column_end":15,"is_primary":true,"text":[{"text":"#[near_bindgen]","highlight_start":3,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"import resolution is stuck, try simplifying macro imports","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot determine resolution for the attribute macro `near_bindgen`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:7:3\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#[near_bindgen]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: import resolution is stuck, try simplifying macro imports\u001b[0m\n\n"}
{"message":"`main` function not found in crate `simple_contract`","code":{"code":"E0601","explanation":"No `main` function was found in a binary crate.\n\nTo fix this error, add a `main` function:\n\n```\nfn main() {\n    // Your program will start here.\n    println!(\"Hello world!\");\n}\n```\n\nIf you don't know the basics of Rust, you can look at the\n[Rust Book][rust-book] to get started.\n\n[rust-book]: https://doc.rust-lang.org/book/\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":0,"byte_end":3542,"line_start":1,"line_end":114,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};","highlight_start":1,"highlight_end":63},{"text":"use near_sdk::{env, near_bindgen};","highlight_start":1,"highlight_end":35},{"text":"","highlight_start":1,"highlight_end":1},{"text":"near_sdk::setup_alloc!();","highlight_start":1,"highlight_end":26},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"#[near_bindgen]","highlight_start":1,"highlight_end":16},{"text":"#[derive(Default, BorshDeserialize, BorshSerialize)]","highlight_start":1,"highlight_end":53},{"text":"pub struct Counter{","highlight_start":1,"highlight_end":20},{"text":"    val: i8,","highlight_start":1,"highlight_end":13},{"text":"}","highlight_start":1,"highlight_end":2},{"text":"","highlight_start":1,"highlight_end":1},{"text":"#[near_bindgen]","highlight_start":1,"highlight_end":16},{"text":"impl Counter {","highlight_start":1,"highlight_end":15},{"text":"    pub fn get_num(&self) -> i8 { ","highlight_start":1,"highlight_end":35},{"text":"        self.val","highlight_start":1,"highlight_end":17},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn increment(&mut self) {","highlight_start":1,"highlight_end":34},{"text":"        self.val += 1;","highlight_start":1,"highlight_end":23},{"text":"        let log_message = format!(\"Increased number to {}\",self.val);","highlight_start":1,"highlight_end":70},{"text":"        env::log(log_message.as_bytes());","highlight_start":1,"highlight_end":42},{"text":"        after_counter_change();","highlight_start":1,"highlight_end":32},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn decrement(&mut self) {","highlight_start":1,"highlight_end":34},{"text":"        self.val -= 1;","highlight_start":1,"highlight_end":23},{"text":"        let log_message = format!(\"Decreased number to {}\", self.val);","highlight_start":1,"highlight_end":71},{"text":"        env::log(log_message.as_bytes());","highlight_start":1,"highlight_end":42},{"text":"        after_counter_change();","highlight_start":1,"highlight_end":32},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn reset(&mut self) {","highlight_start":1,"highlight_end":30},{"text":"        self.val = 0;","highlight_start":1,"highlight_end":22},{"text":"        // Another way to log is to cast a string into bytes, hence \"b\" below:","highlight_start":1,"highlight_end":79},{"text":"        env::log(b\"Reset counter to zero\");","highlight_start":1,"highlight_end":44},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2},{"text":"","highlight_start":1,"highlight_end":1},{"text":"fn after_counter_change() {","highlight_start":1,"highlight_end":28},{"text":"    // show helpful warning that i8 (8-bit signed integer) will overflow above 127 or below -128","highlight_start":1,"highlight_end":97},{"text":"    env::log(\"Make sure you don't overflow, my friend.\".as_bytes());","highlight_start":1,"highlight_end":69},{"text":"}","highlight_start":1,"highlight_end":2},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"#[cfg(test)]","highlight_start":1,"highlight_end":13},{"text":"mod tests {","highlight_start":1,"highlight_end":12},{"text":"    use super::*;","highlight_start":1,"highlight_end":18},{"text":"    use near_sdk::MockedBlockchain;","highlight_start":1,"highlight_end":36},{"text":"    use near_sdk::{testing_env, VMContext};","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // part of writing unit tests is setting up a mock context","highlight_start":1,"highlight_end":63},{"text":"    // in this example, this is only needed for env::log in the contract","highlight_start":1,"highlight_end":73},{"text":"    // this is also a useful list to peek at when wondering what's available in env::*","highlight_start":1,"highlight_end":87},{"text":"    fn get_context(input: Vec<u8>, is_view: bool) -> VMContext {","highlight_start":1,"highlight_end":65},{"text":"        VMContext {","highlight_start":1,"highlight_end":20},{"text":"            current_account_id: \"alice.testnet\".to_string(),","highlight_start":1,"highlight_end":61},{"text":"            signer_account_id: \"robert.testnet\".to_string(),","highlight_start":1,"highlight_end":61},{"text":"            signer_account_pk: vec![0, 1, 2],","highlight_start":1,"highlight_end":46},{"text":"            predecessor_account_id: \"jane.testnet\".to_string(),","highlight_start":1,"highlight_end":64},{"text":"            input,","highlight_start":1,"highlight_end":19},{"text":"            block_index: 0,","highlight_start":1,"highlight_end":28},{"text":"            block_timestamp: 0,","highlight_start":1,"highlight_end":32},{"text":"            account_balance: 0,","highlight_start":1,"highlight_end":32},{"text":"            account_locked_balance: 0,","highlight_start":1,"highlight_end":39},{"text":"            storage_usage: 0,","highlight_start":1,"highlight_end":30},{"text":"            attached_deposit: 0,","highlight_start":1,"highlight_end":33},{"text":"            prepaid_gas: 10u64.pow(18),","highlight_start":1,"highlight_end":40},{"text":"            random_seed: vec![0, 1, 2],","highlight_start":1,"highlight_end":40},{"text":"            is_view,","highlight_start":1,"highlight_end":21},{"text":"            output_data_receivers: vec![],","highlight_start":1,"highlight_end":43},{"text":"            epoch_height: 19,","highlight_start":1,"highlight_end":30},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // mark individual unit tests with #[test] for them to be registered and fired","highlight_start":1,"highlight_end":83},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn increment() {","highlight_start":1,"highlight_end":21},{"text":"        // set up the mock context into the testing environment","highlight_start":1,"highlight_end":64},{"text":"        let context = get_context(vec![], false);","highlight_start":1,"highlight_end":50},{"text":"        testing_env!(context);","highlight_start":1,"highlight_end":31},{"text":"        // instantiate a contract variable with the counter at zero","highlight_start":1,"highlight_end":68},{"text":"        let mut contract = Counter { val: 0 };","highlight_start":1,"highlight_end":47},{"text":"        contract.increment();","highlight_start":1,"highlight_end":30},{"text":"        println!(\"Value after increment: {}\", contract.get_num());","highlight_start":1,"highlight_end":67},{"text":"        // confirm that we received 1 when calling get_num","highlight_start":1,"highlight_end":59},{"text":"        assert_eq!(1, contract.get_num());","highlight_start":1,"highlight_end":43},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn decrement() {","highlight_start":1,"highlight_end":21},{"text":"        let context = get_context(vec![], false);","highlight_start":1,"highlight_end":50},{"text":"        testing_env!(context);","highlight_start":1,"highlight_end":31},{"text":"        let mut contract = Counter { val: 0 };","highlight_start":1,"highlight_end":47},{"text":"        contract.decrement();","highlight_start":1,"highlight_end":30},{"text":"        println!(\"Value after decrement: {}\", contract.get_num());","highlight_start":1,"highlight_end":67},{"text":"        // confirm that we received -1 when calling get_num","highlight_start":1,"highlight_end":60},{"text":"        assert_eq!(-1, contract.get_num());","highlight_start":1,"highlight_end":44},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn increment_and_reset() {","highlight_start":1,"highlight_end":31},{"text":"        let context = get_context(vec![], false);","highlight_start":1,"highlight_end":50},{"text":"        testing_env!(context);","highlight_start":1,"highlight_end":31},{"text":"        let mut contract = Counter { val: 0 };","highlight_start":1,"highlight_end":47},{"text":"        contract.increment();","highlight_start":1,"highlight_end":30},{"text":"        contract.reset();","highlight_start":1,"highlight_end":26},{"text":"        println!(\"Value after reset: {}\", contract.get_num());","highlight_start":1,"highlight_end":63},{"text":"        // confirm that we received -1 when calling get_num","highlight_start":1,"highlight_end":60},{"text":"        assert_eq!(0, contract.get_num());","highlight_start":1,"highlight_end":43},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"consider adding a `main` function to `src/main.rs`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0601]\u001b[0m\u001b[0m\u001b[1m: `main` function not found in crate `simple_contract`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:1:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0muse near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse near_sdk::{env, near_bindgen};\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mnear_sdk::setup_alloc!();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m113\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m114\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mconsider adding a `main` function to `src/main.rs`\u001b[0m\n\n"}
{"message":"aborting due to 9 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 9 previous errors\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0432, E0433, E0601.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0432, E0433, E0601.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0432`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0432`.\u001b[0m\n"}
